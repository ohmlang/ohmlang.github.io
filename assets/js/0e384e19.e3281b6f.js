"use strict";(self.webpackChunkohmjs_org=self.webpackChunkohmjs_org||[]).push([[671],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9881:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return c}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),o=["components"],l={},s="Introduction",m={unversionedId:"intro",id:"intro",title:"Introduction",description:"Getting Started",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",editUrl:"https://github.com/ohmjs/ohm/edit/main/doc/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",next:{title:"Syntax Reference",permalink:"/docs/syntax-reference"}},p={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Resources",id:"resources",level:2},{value:"Installation",id:"installation",level:2},{value:"On a web page",id:"on-a-web-page",level:3},{value:"Node.js",id:"nodejs",level:3},{value:"Deno",id:"deno",level:3},{value:"Basics",id:"basics",level:2},{value:"Defining Grammars",id:"defining-grammars",level:3},{value:"Using Grammars",id:"using-grammars",level:3},{value:"Debugging",id:"debugging",level:2}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"The easiest way to get started with Ohm is to use the ",(0,i.kt)("a",{parentName:"p",href:"https://ohmjs.org/editor/"},"interactive editor"),". Alternatively, you can play with one of the following examples on JSFiddle:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://jsfiddle.net/pdubroy/p3b1v2xb/"},"Basic parsing example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://jsfiddle.net/pdubroy/15k63qae/"},"Arithmetic example with semantics"))),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tutorial: ",(0,i.kt)("a",{parentName:"li",href:"https://nextjournal.com/dubroy/ohm-parsing-made-easy"},"Ohm: Parsing Made Easy")),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/ohmjs/ohm/tree/main/examples/math/index.html"},"math example")," is extensively commented and is a good way to dive deeper."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ohmjs/ohm/tree/main/examples/"},"Examples")),(0,i.kt)("li",{parentName:"ul"},"For community support and discussion, join us on ",(0,i.kt)("a",{parentName:"li",href:"https://discord.gg/KwxY5gegRQ"},"Discord"),", ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/ohmjs/ohm/discussions"},"GitHub Discussions"),", or the ",(0,i.kt)("a",{parentName:"li",href:"https://groups.google.com/u/0/g/ohm-discuss"},"ohm-discuss mailing list"),"."),(0,i.kt)("li",{parentName:"ul"},"For updates, follow ",(0,i.kt)("a",{parentName:"li",href:"https://twitter.com/_ohmjs"},"@","_","ohmjs on Twitter"),".")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"on-a-web-page"},"On a web page"),(0,i.kt)("p",null,"To use Ohm in the browser, just add a single ",(0,i.kt)("inlineCode",{parentName:"p"},"<script>")," tag to your page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- Development version of Ohm from unpkg.com --\x3e\n<script src="https://unpkg.com/ohm-js@17/dist/ohm.js"><\/script>\n')),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- Minified version, for faster page loads --\x3e\n<script src="https://unpkg.com/ohm-js@17/dist/ohm.min.js"><\/script>\n')),(0,i.kt)("p",null,"This creates a global variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"ohm"),"."),(0,i.kt)("h3",{id:"nodejs"},"Node.js"),(0,i.kt)("p",null,"First, install the ",(0,i.kt)("inlineCode",{parentName:"p"},"ohm-js")," package with your package manager:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://npmjs.org"},"npm"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"npm install ohm-js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://yarnpkg.com/"},"Yarn"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn add ohm-js")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pnpm.io/"},"pnpm"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"pnpm add ohm-js"))),(0,i.kt)("p",null,"Then, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"require")," to use Ohm in a script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const ohm = require('ohm-js');\n")),(0,i.kt)("p",null,"Ohm can also be imported as an ES module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as ohm from 'ohm-js';\n")),(0,i.kt)("h3",{id:"deno"},"Deno"),(0,i.kt)("p",null,"To use Ohm from ",(0,i.kt)("a",{parentName:"p",href:"https://deno.land/"},"Deno"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import * as ohm from 'https://unpkg.com/ohm-js@17';\n")),(0,i.kt)("h2",{id:"basics"},"Basics"),(0,i.kt)("h3",{id:"defining-grammars"},"Defining Grammars"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://ohmjs.org/img/docs/instantiating-grammars.png",alt:"Instantiating a grammar"})),(0,i.kt)("p",null,"To use Ohm, you need a grammar that is written in the Ohm language. The grammar provides a formal\ndefinition of the language or data format that you want to parse. There are a few different ways\nyou can define an Ohm grammar:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The simplest option is to define the grammar directly in a JavaScript string and instantiate it\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"ohm.grammar()"),". In most cases, you should use a ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw"},"template literal with String.raw"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const myGrammar = ohm.grammar(String.raw`\n  MyGrammar {\n    greeting = "Hello" | "Hola"\n  }\n`);\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"In Node.js"),", you can define the grammar in a separate file, and read the file's contents and instantiate it using ",(0,i.kt)("inlineCode",{parentName:"p"},"ohm.grammar(contents)"),":"),(0,i.kt)("p",{parentName:"li"},"In ",(0,i.kt)("inlineCode",{parentName:"p"},"myGrammar.ohm"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'  MyGrammar {\n    greeting = "Hello" | "Hola"\n  }\n')),(0,i.kt)("p",{parentName:"li"},"In JavaScript:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs');\nconst ohm = require('ohm-js');\nconst contents = fs.readFileSync('myGrammar.ohm', 'utf-8');\nconst myGrammar = ohm.grammar(contents);\n")))),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference#instantiating-grammars"},"Instantiating Grammars")," in the API reference."),(0,i.kt)("h3",{id:"using-grammars"},"Using Grammars"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://ohmjs.org/img/docs/matching.png",alt:"Matching input"})),(0,i.kt)("p",null,"Once you've instantiated a grammar object, use the grammar's ",(0,i.kt)("inlineCode",{parentName:"p"},"match()")," method to recognize input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const userInput = 'Hello';\nconst m = myGrammar.match(userInput);\nif (m.succeeded()) {\n  console.log('Greetings, human.');\n} else {\n  console.log(\"That's not a greeting!\");\n}\n")),(0,i.kt)("p",null,"The result is a MatchResult object. You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"succeeded()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"failed()")," methods to see whether the input was recognized or not."),(0,i.kt)("p",null,"For more information, see the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference"},"API Reference"),"."),(0,i.kt)("h2",{id:"debugging"},"Debugging"),(0,i.kt)("p",null,"Ohm has two tools to help you debug grammars: a text trace, and a graphical visualizer."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ohmjs.org/editor"},(0,i.kt)("img",{parentName:"a",src:"https://ohmjs.org/img/docs/visualizer-small.png",alt:"Ohm Visualizer"}))),(0,i.kt)("p",null,"You can ",(0,i.kt)("a",{parentName:"p",href:"https://ohmjs.org/editor"},"try the visualizer online"),"."),(0,i.kt)("p",null,"To see the text trace for a grammar ",(0,i.kt)("inlineCode",{parentName:"p"},"g"),", just use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference#trace"},(0,i.kt)("inlineCode",{parentName:"a"},"g.trace()")),"\nmethod instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"g.match"),". It takes the same arguments, but instead of returning a MatchResult\nobject, it returns a Trace object \u2014 calling its ",(0,i.kt)("inlineCode",{parentName:"p"},"toString")," method returns a string describing\nall of the decisions the parser made when trying to match the input. For example, here is the\nresult of ",(0,i.kt)("inlineCode",{parentName:"p"},"g.trace('ab').toString()")," for the grammar ",(0,i.kt)("inlineCode",{parentName:"p"},"G { start = letter+ }"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ab         \u2713 start \u21d2  "ab"\nab           \u2713 letter+ \u21d2  "ab"\nab             \u2713 letter \u21d2  "a"\nab                 \u2713 lower \u21d2  "a"\nab                   \u2713 Unicode [Ll] character \u21d2  "a"\nb              \u2713 letter \u21d2  "b"\nb                  \u2713 lower \u21d2  "b"\nb                    \u2713 Unicode [Ll] character \u21d2  "b"\n               \u2717 letter\n                   \u2717 lower\n                     \u2717 Unicode [Ll] character\n                   \u2717 upper\n                     \u2717 Unicode [Lu] character\n                   \u2717 unicodeLtmo\n                     \u2717 Unicode [Ltmo] character\n           \u2713 end \u21d2  ""\n')))}d.isMDXComponent=!0}}]);