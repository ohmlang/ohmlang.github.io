"use strict";(self.webpackChunkohmjs_org=self.webpackChunkohmjs_org||[]).push([[421],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,d=u["".concat(m,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6527:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return m},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],l={},m="Ohm Documentation",c={unversionedId:"README",id:"README",title:"Ohm Documentation",description:"- Ohm/JS API Reference",source:"@site/docs/README.md",sourceDirName:".",slug:"/",permalink:"/docs/",editUrl:"https://github.com/harc/ohm/edit/main/doc/README.md",tags:[],version:"current",frontMatter:{}},s={},p=[{value:"Examples",id:"examples",level:2},{value:"Matching Strings",id:"matching-strings",level:3},{value:"Implementing Semantics",id:"implementing-semantics",level:3}],u={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ohm-documentation"},"Ohm Documentation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api-reference"},"Ohm/JS API Reference")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/syntax-reference"},"Ohm Syntax Reference")),(0,o.kt)("li",{parentName:"ul"},"Learn more about the ",(0,o.kt)("a",{parentName:"li",href:"/docs/philosophy"},"Ohm philosophy")),(0,o.kt)("li",{parentName:"ul"},"See ",(0,o.kt)("a",{parentName:"li",href:"/docs/patterns-and-pitfalls"},"Patterns and Pitfalls")," for some common Ohm patterns and solutions to frequently-encountered difficulties.")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"Here are some quick samples of what it's like to work with Ohm. For more in-depth examples, see the ",(0,o.kt)("a",{parentName:"p",href:"../examples/"},"examples directory"),", especially the ",(0,o.kt)("a",{parentName:"p",href:"../examples/math/index.html"},"math example")," which is extensively commented."),(0,o.kt)("h3",{id:"matching-strings"},"Matching Strings"),(0,o.kt)("p",null,"Instantiate a grammar from a string using ",(0,o.kt)("inlineCode",{parentName:"p"},"ohm.grammar()"),", and check inputs using the grammar's ",(0,o.kt)("inlineCode",{parentName:"p"},"match()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ohm = require('ohm-js');\nconst g = ohm.grammar(`\n  Laugh {\n    laugh = lol | \"lmao\"\n    lol = \"l\" \"o\"+ \"l\"\n  }`);\nassert(g.match('lol').succeeded());\nassert(!g.match('lmao').failed());\nassert(g.match('loooooool').succeeded());\n")),(0,o.kt)("h3",{id:"implementing-semantics"},"Implementing Semantics"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("em",{parentName:"p"},"operations")," and ",(0,o.kt)("em",{parentName:"p"},"attributes")," to analyze and extract values from parsed data. For example, take the following grammar in ",(0,o.kt)("inlineCode",{parentName:"p"},"arithmetic.ohm"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Arithmetic {\n  Exp\n    = AddExp\n\n  AddExp\n    = AddExp "+" PriExp  -- plus\n    | AddExp "-" PriExp  -- minus\n    | PriExp\n\n  PriExp\n    = "(" Exp ")"  -- paren\n    | number\n\n  number\n    = digit+\n}\n')),(0,o.kt)("p",null,"We can create an operation named 'eval' to evaluate arithmetic expressions that match the grammar:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Instantiate the grammar.\nconst fs = require('fs');\nconst g = ohm.grammar(fs.readFileSync('arithmetic.ohm'));\n\n// Create an operation that evaluates the expression. An operation always belongs to a Semantics,\n// which is a family of related operations and attributes for a particular grammar.\nconst semantics = g.createSemantics().addOperation('eval', {\n  Exp(e) {\n    return e.eval();\n  },\n  AddExp(e) {\n    return e.eval();\n  },\n  AddExp_plus(left, op, right) {\n    return left.eval() + right.eval();\n  },\n  AddExp_minus(left, op, right) {\n    return left.eval() - right.eval();\n  },\n  PriExp(e) {\n    return e.eval();\n  },\n  PriExp_paren(open, exp, close) {\n    return exp.eval();\n  },\n  number(chars) {\n    return parseInt(this.sourceString, 10);\n  }\n});\nconst match = g.match('1 + (2 - 3) + 4');\nassert.equal(semantics(match).eval(), 4);\n")),(0,o.kt)("p",null,"You can learn more about semantics in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference#semantics"},"API reference"),"."))}h.isMDXComponent=!0}}]);